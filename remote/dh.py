#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
@date: 2015-09-03
@author: Shell.Xu
@copyright: 2015, Shell.Xu <shell909090@gmail.com>
@license: BSD-3-clause
@comment:
I saw the code in https://github.com/lowazo/pyDHE/blob/master/DiffieHellman.py, but it is GPL-3. So I'm not copy it, rewrite it according http://tools.ietf.org/html/rfc3526. Those numbers, I'm not so sure what its copyright is, or what license it is. I think I may use it here, Mail me if I'm wrong.
'''
from binascii import hexlify
import hashlib

try:
    import Crypto.Random.random
    secure_random = Crypto.Random.random.getrandbits
except ImportError:
    import OpenSSL
    secure_random = lambda x: long(hexlify(OpenSSL.rand.bytes(x>>3)), 16)

GENERATOR = 2
PRIME6144 = 0x	

def sha256(s):
    h = hashlib.sha256()
    h.update(s)
    return h.digest()

def gen_prikey(bits=576):
    return secure_random(bits)

def gen_pubkey(prikey, prime=PRIME6144):
    return pow(GENERATOR, prikey, prime)

def gen_key(prikey, other, prime=PRIME6144):
    if other <= 2 or other >= prime - 1 or not pow(other, (prime-1)/2, prime):
        raise Exception('invaild other key')
    k = pow(other, prikey, prime)
    return sha256(str(k))

def main():
    pri1 = gen_prikey()
    pri2 = gen_prikey()

    pub1 = gen_pubkey(pri1)
    pub2 = gen_pubkey(pri2)

    k1 = gen_key(pri1, pub2)
    k2 = gen_key(pri2, pub1)

    print k1
    print k2
    print k1 == k2

if __name__ == '__main__': main()
